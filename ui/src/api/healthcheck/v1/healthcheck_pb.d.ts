// @generated by protoc-gen-es v1.2.1
// @generated from file healthcheck/v1/healthcheck.proto (package datalift.healthcheck.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message datalift.healthcheck.v1.HealthcheckRequest
 */
export declare class HealthcheckRequest extends Message<HealthcheckRequest> {
  constructor(data?: PartialMessage<HealthcheckRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datalift.healthcheck.v1.HealthcheckRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HealthcheckRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HealthcheckRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HealthcheckRequest;

  static equals(a: HealthcheckRequest | PlainMessage<HealthcheckRequest> | undefined, b: HealthcheckRequest | PlainMessage<HealthcheckRequest> | undefined): boolean;
}

/**
 * @generated from message datalift.healthcheck.v1.HealthcheckResponse
 */
export declare class HealthcheckResponse extends Message<HealthcheckResponse> {
  constructor(data?: PartialMessage<HealthcheckResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datalift.healthcheck.v1.HealthcheckResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HealthcheckResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HealthcheckResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HealthcheckResponse;

  static equals(a: HealthcheckResponse | PlainMessage<HealthcheckResponse> | undefined, b: HealthcheckResponse | PlainMessage<HealthcheckResponse> | undefined): boolean;
}

