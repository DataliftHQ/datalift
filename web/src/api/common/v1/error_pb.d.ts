// @generated by protoc-gen-es v1.2.1
// @generated from file common/v1/error.proto (package datalift.common.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Status } from "../../google/rpc/status_pb.js";

/**
 * Any error information beyond code and status should be included here and
 * added to the error in the status details field. The frontend knows how to
 * render all of the fields in a user-friendly way. If there is extremely
 * verbose error information, consider adding it using a different type, e.g.
 * from the errdetails package. Any details not using this type will still be
 * accessible to the user in a raw format.
 *
 * @generated from message datalift.common.v1.ErrorDetails
 */
export declare class ErrorDetails extends Message<ErrorDetails> {
  /**
   * If there are any underlying errors that were being wrapped, they are
   * presented here.
   *
   * @generated from field: repeated google.rpc.Status wrapped = 1;
   */
  wrapped: Status[];

  constructor(data?: PartialMessage<ErrorDetails>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datalift.common.v1.ErrorDetails";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ErrorDetails;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ErrorDetails;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ErrorDetails;

  static equals(a: ErrorDetails | PlainMessage<ErrorDetails> | undefined, b: ErrorDetails | PlainMessage<ErrorDetails> | undefined): boolean;
}

