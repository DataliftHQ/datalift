// @generated by protoc-gen-es v1.2.1
// @generated from file authn/v1/authn.proto (package datalift.authn.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, Duration, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message datalift.authn.v1.LoginRequest
 */
export declare class LoginRequest extends Message<LoginRequest> {
  /**
   * @generated from field: string redirect_url = 1;
   */
  redirectUrl: string;

  constructor(data?: PartialMessage<LoginRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datalift.authn.v1.LoginRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginRequest;

  static equals(a: LoginRequest | PlainMessage<LoginRequest> | undefined, b: LoginRequest | PlainMessage<LoginRequest> | undefined): boolean;
}

/**
 * @generated from message datalift.authn.v1.LoginResponse
 */
export declare class LoginResponse extends Message<LoginResponse> {
  /**
   * If the user presents a refresh token and refresh succeeds, they will receive the token in response. Otherwise,
   * they will be redirected through the authentication flow.
   *
   * @generated from oneof datalift.authn.v1.LoginResponse.return
   */
  return: {
    /**
     * @generated from field: string auth_url = 1;
     */
    value: string;
    case: "authUrl";
  } | {
    /**
     * @generated from field: datalift.authn.v1.LoginResponse.Token token = 2;
     */
    value: LoginResponse_Token;
    case: "token";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<LoginResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datalift.authn.v1.LoginResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginResponse;

  static equals(a: LoginResponse | PlainMessage<LoginResponse> | undefined, b: LoginResponse | PlainMessage<LoginResponse> | undefined): boolean;
}

/**
 * @generated from message datalift.authn.v1.LoginResponse.Token
 */
export declare class LoginResponse_Token extends Message<LoginResponse_Token> {
  /**
   * @generated from field: string access_token = 1;
   */
  accessToken: string;

  /**
   * @generated from field: string refresh_token = 2;
   */
  refreshToken: string;

  constructor(data?: PartialMessage<LoginResponse_Token>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datalift.authn.v1.LoginResponse.Token";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginResponse_Token;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginResponse_Token;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginResponse_Token;

  static equals(a: LoginResponse_Token | PlainMessage<LoginResponse_Token> | undefined, b: LoginResponse_Token | PlainMessage<LoginResponse_Token> | undefined): boolean;
}

/**
 * See https://www.oauth.com/oauth2-servers/authorization/the-authorization-response/ for description of the parameters.
 *
 * @generated from message datalift.authn.v1.CallbackRequest
 */
export declare class CallbackRequest extends Message<CallbackRequest> {
  /**
   * @generated from field: string code = 1;
   */
  code: string;

  /**
   * @generated from field: string state = 2;
   */
  state: string;

  /**
   * @generated from field: string error = 3;
   */
  error: string;

  /**
   * @generated from field: string error_description = 4;
   */
  errorDescription: string;

  constructor(data?: PartialMessage<CallbackRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datalift.authn.v1.CallbackRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CallbackRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CallbackRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CallbackRequest;

  static equals(a: CallbackRequest | PlainMessage<CallbackRequest> | undefined, b: CallbackRequest | PlainMessage<CallbackRequest> | undefined): boolean;
}

/**
 * @generated from message datalift.authn.v1.CallbackResponse
 */
export declare class CallbackResponse extends Message<CallbackResponse> {
  /**
   * This is the token that the user should present. Note: this response is only valid in a gRPC context. In an HTTP
   * context the user will be redirected.
   *
   * @generated from field: string access_token = 1;
   */
  accessToken: string;

  /**
   * The refresh token will be empty if no refresh token was issued.
   *
   * @generated from field: string refresh_token = 2;
   */
  refreshToken: string;

  constructor(data?: PartialMessage<CallbackResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datalift.authn.v1.CallbackResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CallbackResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CallbackResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CallbackResponse;

  static equals(a: CallbackResponse | PlainMessage<CallbackResponse> | undefined, b: CallbackResponse | PlainMessage<CallbackResponse> | undefined): boolean;
}

/**
 * @generated from message datalift.authn.v1.CreateTokenRequest
 */
export declare class CreateTokenRequest extends Message<CreateTokenRequest> {
  /**
   * The subject to issue this token for.
   *
   * @generated from field: string subject = 1;
   */
  subject: string;

  /**
   * The duration until this token should expire. If unset, the token will never expire.
   *
   * @generated from field: google.protobuf.Duration expiry = 2;
   */
  expiry?: Duration;

  /**
   * The kind of token to issue. This provides namespacing to avoid naming collisions.
   *
   * @generated from field: datalift.authn.v1.CreateTokenRequest.TokenType token_type = 3;
   */
  tokenType: CreateTokenRequest_TokenType;

  constructor(data?: PartialMessage<CreateTokenRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datalift.authn.v1.CreateTokenRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTokenRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTokenRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTokenRequest;

  static equals(a: CreateTokenRequest | PlainMessage<CreateTokenRequest> | undefined, b: CreateTokenRequest | PlainMessage<CreateTokenRequest> | undefined): boolean;
}

/**
 * @generated from enum datalift.authn.v1.CreateTokenRequest.TokenType
 */
export declare enum CreateTokenRequest_TokenType {
  /**
   * @generated from enum value: UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Token is issued on behalf of another service for programmatic access.
   *
   * @generated from enum value: SERVICE = 1;
   */
  SERVICE = 1,
}

/**
 * @generated from message datalift.authn.v1.CreateTokenResponse
 */
export declare class CreateTokenResponse extends Message<CreateTokenResponse> {
  /**
   * The access token associated with the newly created token.
   *
   * @generated from field: string access_token = 1;
   */
  accessToken: string;

  constructor(data?: PartialMessage<CreateTokenResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "datalift.authn.v1.CreateTokenResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTokenResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTokenResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTokenResponse;

  static equals(a: CreateTokenResponse | PlainMessage<CreateTokenResponse> | undefined, b: CreateTokenResponse | PlainMessage<CreateTokenResponse> | undefined): boolean;
}

