// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: authn/v1/authn.proto

package authnv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "go.datalift.io/datalift/api/authn/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AuthnAPIName is the fully-qualified name of the AuthnAPI service.
	AuthnAPIName = "datalift.authn.v1.AuthnAPI"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthnAPILoginProcedure is the fully-qualified name of the AuthnAPI's Login RPC.
	AuthnAPILoginProcedure = "/datalift.authn.v1.AuthnAPI/Login"
	// AuthnAPICallbackProcedure is the fully-qualified name of the AuthnAPI's Callback RPC.
	AuthnAPICallbackProcedure = "/datalift.authn.v1.AuthnAPI/Callback"
	// AuthnAPICreateTokenProcedure is the fully-qualified name of the AuthnAPI's CreateToken RPC.
	AuthnAPICreateTokenProcedure = "/datalift.authn.v1.AuthnAPI/CreateToken"
)

// AuthnAPIClient is a client for the datalift.authn.v1.AuthnAPI service.
type AuthnAPIClient interface {
	Login(context.Context, *connect_go.Request[v1.LoginRequest]) (*connect_go.Response[v1.LoginResponse], error)
	Callback(context.Context, *connect_go.Request[v1.CallbackRequest]) (*connect_go.Response[v1.CallbackResponse], error)
	CreateToken(context.Context, *connect_go.Request[v1.CreateTokenRequest]) (*connect_go.Response[v1.CreateTokenResponse], error)
}

// NewAuthnAPIClient constructs a client for the datalift.authn.v1.AuthnAPI service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthnAPIClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AuthnAPIClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authnAPIClient{
		login: connect_go.NewClient[v1.LoginRequest, v1.LoginResponse](
			httpClient,
			baseURL+AuthnAPILoginProcedure,
			opts...,
		),
		callback: connect_go.NewClient[v1.CallbackRequest, v1.CallbackResponse](
			httpClient,
			baseURL+AuthnAPICallbackProcedure,
			opts...,
		),
		createToken: connect_go.NewClient[v1.CreateTokenRequest, v1.CreateTokenResponse](
			httpClient,
			baseURL+AuthnAPICreateTokenProcedure,
			opts...,
		),
	}
}

// authnAPIClient implements AuthnAPIClient.
type authnAPIClient struct {
	login       *connect_go.Client[v1.LoginRequest, v1.LoginResponse]
	callback    *connect_go.Client[v1.CallbackRequest, v1.CallbackResponse]
	createToken *connect_go.Client[v1.CreateTokenRequest, v1.CreateTokenResponse]
}

// Login calls datalift.authn.v1.AuthnAPI.Login.
func (c *authnAPIClient) Login(ctx context.Context, req *connect_go.Request[v1.LoginRequest]) (*connect_go.Response[v1.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// Callback calls datalift.authn.v1.AuthnAPI.Callback.
func (c *authnAPIClient) Callback(ctx context.Context, req *connect_go.Request[v1.CallbackRequest]) (*connect_go.Response[v1.CallbackResponse], error) {
	return c.callback.CallUnary(ctx, req)
}

// CreateToken calls datalift.authn.v1.AuthnAPI.CreateToken.
func (c *authnAPIClient) CreateToken(ctx context.Context, req *connect_go.Request[v1.CreateTokenRequest]) (*connect_go.Response[v1.CreateTokenResponse], error) {
	return c.createToken.CallUnary(ctx, req)
}

// AuthnAPIHandler is an implementation of the datalift.authn.v1.AuthnAPI service.
type AuthnAPIHandler interface {
	Login(context.Context, *connect_go.Request[v1.LoginRequest]) (*connect_go.Response[v1.LoginResponse], error)
	Callback(context.Context, *connect_go.Request[v1.CallbackRequest]) (*connect_go.Response[v1.CallbackResponse], error)
	CreateToken(context.Context, *connect_go.Request[v1.CreateTokenRequest]) (*connect_go.Response[v1.CreateTokenResponse], error)
}

// NewAuthnAPIHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthnAPIHandler(svc AuthnAPIHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(AuthnAPILoginProcedure, connect_go.NewUnaryHandler(
		AuthnAPILoginProcedure,
		svc.Login,
		opts...,
	))
	mux.Handle(AuthnAPICallbackProcedure, connect_go.NewUnaryHandler(
		AuthnAPICallbackProcedure,
		svc.Callback,
		opts...,
	))
	mux.Handle(AuthnAPICreateTokenProcedure, connect_go.NewUnaryHandler(
		AuthnAPICreateTokenProcedure,
		svc.CreateToken,
		opts...,
	))
	return "/datalift.authn.v1.AuthnAPI/", mux
}

// UnimplementedAuthnAPIHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthnAPIHandler struct{}

func (UnimplementedAuthnAPIHandler) Login(context.Context, *connect_go.Request[v1.LoginRequest]) (*connect_go.Response[v1.LoginResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("datalift.authn.v1.AuthnAPI.Login is not implemented"))
}

func (UnimplementedAuthnAPIHandler) Callback(context.Context, *connect_go.Request[v1.CallbackRequest]) (*connect_go.Response[v1.CallbackResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("datalift.authn.v1.AuthnAPI.Callback is not implemented"))
}

func (UnimplementedAuthnAPIHandler) CreateToken(context.Context, *connect_go.Request[v1.CreateTokenRequest]) (*connect_go.Response[v1.CreateTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("datalift.authn.v1.AuthnAPI.CreateToken is not implemented"))
}
