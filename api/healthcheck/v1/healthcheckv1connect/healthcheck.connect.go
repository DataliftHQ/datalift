// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: healthcheck/v1/healthcheck.proto

package healthcheckv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "go.datalift.io/datalift/api/healthcheck/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// HealthcheckAPIName is the fully-qualified name of the HealthcheckAPI service.
	HealthcheckAPIName = "datalift.healthcheck.v1.HealthcheckAPI"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// HealthcheckAPIHealthcheckProcedure is the fully-qualified name of the HealthcheckAPI's
	// Healthcheck RPC.
	HealthcheckAPIHealthcheckProcedure = "/datalift.healthcheck.v1.HealthcheckAPI/Healthcheck"
)

// HealthcheckAPIClient is a client for the datalift.healthcheck.v1.HealthcheckAPI service.
type HealthcheckAPIClient interface {
	Healthcheck(context.Context, *connect_go.Request[v1.HealthcheckRequest]) (*connect_go.Response[v1.HealthcheckResponse], error)
}

// NewHealthcheckAPIClient constructs a client for the datalift.healthcheck.v1.HealthcheckAPI
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHealthcheckAPIClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) HealthcheckAPIClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &healthcheckAPIClient{
		healthcheck: connect_go.NewClient[v1.HealthcheckRequest, v1.HealthcheckResponse](
			httpClient,
			baseURL+HealthcheckAPIHealthcheckProcedure,
			opts...,
		),
	}
}

// healthcheckAPIClient implements HealthcheckAPIClient.
type healthcheckAPIClient struct {
	healthcheck *connect_go.Client[v1.HealthcheckRequest, v1.HealthcheckResponse]
}

// Healthcheck calls datalift.healthcheck.v1.HealthcheckAPI.Healthcheck.
func (c *healthcheckAPIClient) Healthcheck(ctx context.Context, req *connect_go.Request[v1.HealthcheckRequest]) (*connect_go.Response[v1.HealthcheckResponse], error) {
	return c.healthcheck.CallUnary(ctx, req)
}

// HealthcheckAPIHandler is an implementation of the datalift.healthcheck.v1.HealthcheckAPI service.
type HealthcheckAPIHandler interface {
	Healthcheck(context.Context, *connect_go.Request[v1.HealthcheckRequest]) (*connect_go.Response[v1.HealthcheckResponse], error)
}

// NewHealthcheckAPIHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHealthcheckAPIHandler(svc HealthcheckAPIHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(HealthcheckAPIHealthcheckProcedure, connect_go.NewUnaryHandler(
		HealthcheckAPIHealthcheckProcedure,
		svc.Healthcheck,
		opts...,
	))
	return "/datalift.healthcheck.v1.HealthcheckAPI/", mux
}

// UnimplementedHealthcheckAPIHandler returns CodeUnimplemented from all methods.
type UnimplementedHealthcheckAPIHandler struct{}

func (UnimplementedHealthcheckAPIHandler) Healthcheck(context.Context, *connect_go.Request[v1.HealthcheckRequest]) (*connect_go.Response[v1.HealthcheckResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("datalift.healthcheck.v1.HealthcheckAPI.Healthcheck is not implemented"))
}
