// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: application/v1/application.proto

package applicationv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "go.datalift.io/datalift/api/application/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ApplicationAPIName is the fully-qualified name of the ApplicationAPI service.
	ApplicationAPIName = "datalift.application.v1.ApplicationAPI"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ApplicationAPICreateApplicationProcedure is the fully-qualified name of the ApplicationAPI's
	// CreateApplication RPC.
	ApplicationAPICreateApplicationProcedure = "/datalift.application.v1.ApplicationAPI/CreateApplication"
	// ApplicationAPIDeleteApplicationProcedure is the fully-qualified name of the ApplicationAPI's
	// DeleteApplication RPC.
	ApplicationAPIDeleteApplicationProcedure = "/datalift.application.v1.ApplicationAPI/DeleteApplication"
	// ApplicationAPIGetApplicationProcedure is the fully-qualified name of the ApplicationAPI's
	// GetApplication RPC.
	ApplicationAPIGetApplicationProcedure = "/datalift.application.v1.ApplicationAPI/GetApplication"
	// ApplicationAPIListApplicationsProcedure is the fully-qualified name of the ApplicationAPI's
	// ListApplications RPC.
	ApplicationAPIListApplicationsProcedure = "/datalift.application.v1.ApplicationAPI/ListApplications"
	// ApplicationAPIUpdateApplicationProcedure is the fully-qualified name of the ApplicationAPI's
	// UpdateApplication RPC.
	ApplicationAPIUpdateApplicationProcedure = "/datalift.application.v1.ApplicationAPI/UpdateApplication"
)

// ApplicationAPIClient is a client for the datalift.application.v1.ApplicationAPI service.
type ApplicationAPIClient interface {
	CreateApplication(context.Context, *connect_go.Request[v1.CreateApplicationRequest]) (*connect_go.Response[v1.CreateApplicationResponse], error)
	DeleteApplication(context.Context, *connect_go.Request[v1.DeleteApplicationRequest]) (*connect_go.Response[v1.DeleteApplicationResponse], error)
	GetApplication(context.Context, *connect_go.Request[v1.GetApplicationRequest]) (*connect_go.Response[v1.GetApplicationResponse], error)
	ListApplications(context.Context, *connect_go.Request[v1.ListApplicationsRequest]) (*connect_go.Response[v1.ListApplicationsResponse], error)
	UpdateApplication(context.Context, *connect_go.Request[v1.UpdateApplicationRequest]) (*connect_go.Response[v1.UpdateApplicationResponse], error)
}

// NewApplicationAPIClient constructs a client for the datalift.application.v1.ApplicationAPI
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewApplicationAPIClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ApplicationAPIClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &applicationAPIClient{
		createApplication: connect_go.NewClient[v1.CreateApplicationRequest, v1.CreateApplicationResponse](
			httpClient,
			baseURL+ApplicationAPICreateApplicationProcedure,
			opts...,
		),
		deleteApplication: connect_go.NewClient[v1.DeleteApplicationRequest, v1.DeleteApplicationResponse](
			httpClient,
			baseURL+ApplicationAPIDeleteApplicationProcedure,
			opts...,
		),
		getApplication: connect_go.NewClient[v1.GetApplicationRequest, v1.GetApplicationResponse](
			httpClient,
			baseURL+ApplicationAPIGetApplicationProcedure,
			opts...,
		),
		listApplications: connect_go.NewClient[v1.ListApplicationsRequest, v1.ListApplicationsResponse](
			httpClient,
			baseURL+ApplicationAPIListApplicationsProcedure,
			opts...,
		),
		updateApplication: connect_go.NewClient[v1.UpdateApplicationRequest, v1.UpdateApplicationResponse](
			httpClient,
			baseURL+ApplicationAPIUpdateApplicationProcedure,
			opts...,
		),
	}
}

// applicationAPIClient implements ApplicationAPIClient.
type applicationAPIClient struct {
	createApplication *connect_go.Client[v1.CreateApplicationRequest, v1.CreateApplicationResponse]
	deleteApplication *connect_go.Client[v1.DeleteApplicationRequest, v1.DeleteApplicationResponse]
	getApplication    *connect_go.Client[v1.GetApplicationRequest, v1.GetApplicationResponse]
	listApplications  *connect_go.Client[v1.ListApplicationsRequest, v1.ListApplicationsResponse]
	updateApplication *connect_go.Client[v1.UpdateApplicationRequest, v1.UpdateApplicationResponse]
}

// CreateApplication calls datalift.application.v1.ApplicationAPI.CreateApplication.
func (c *applicationAPIClient) CreateApplication(ctx context.Context, req *connect_go.Request[v1.CreateApplicationRequest]) (*connect_go.Response[v1.CreateApplicationResponse], error) {
	return c.createApplication.CallUnary(ctx, req)
}

// DeleteApplication calls datalift.application.v1.ApplicationAPI.DeleteApplication.
func (c *applicationAPIClient) DeleteApplication(ctx context.Context, req *connect_go.Request[v1.DeleteApplicationRequest]) (*connect_go.Response[v1.DeleteApplicationResponse], error) {
	return c.deleteApplication.CallUnary(ctx, req)
}

// GetApplication calls datalift.application.v1.ApplicationAPI.GetApplication.
func (c *applicationAPIClient) GetApplication(ctx context.Context, req *connect_go.Request[v1.GetApplicationRequest]) (*connect_go.Response[v1.GetApplicationResponse], error) {
	return c.getApplication.CallUnary(ctx, req)
}

// ListApplications calls datalift.application.v1.ApplicationAPI.ListApplications.
func (c *applicationAPIClient) ListApplications(ctx context.Context, req *connect_go.Request[v1.ListApplicationsRequest]) (*connect_go.Response[v1.ListApplicationsResponse], error) {
	return c.listApplications.CallUnary(ctx, req)
}

// UpdateApplication calls datalift.application.v1.ApplicationAPI.UpdateApplication.
func (c *applicationAPIClient) UpdateApplication(ctx context.Context, req *connect_go.Request[v1.UpdateApplicationRequest]) (*connect_go.Response[v1.UpdateApplicationResponse], error) {
	return c.updateApplication.CallUnary(ctx, req)
}

// ApplicationAPIHandler is an implementation of the datalift.application.v1.ApplicationAPI service.
type ApplicationAPIHandler interface {
	CreateApplication(context.Context, *connect_go.Request[v1.CreateApplicationRequest]) (*connect_go.Response[v1.CreateApplicationResponse], error)
	DeleteApplication(context.Context, *connect_go.Request[v1.DeleteApplicationRequest]) (*connect_go.Response[v1.DeleteApplicationResponse], error)
	GetApplication(context.Context, *connect_go.Request[v1.GetApplicationRequest]) (*connect_go.Response[v1.GetApplicationResponse], error)
	ListApplications(context.Context, *connect_go.Request[v1.ListApplicationsRequest]) (*connect_go.Response[v1.ListApplicationsResponse], error)
	UpdateApplication(context.Context, *connect_go.Request[v1.UpdateApplicationRequest]) (*connect_go.Response[v1.UpdateApplicationResponse], error)
}

// NewApplicationAPIHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewApplicationAPIHandler(svc ApplicationAPIHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	applicationAPICreateApplicationHandler := connect_go.NewUnaryHandler(
		ApplicationAPICreateApplicationProcedure,
		svc.CreateApplication,
		opts...,
	)
	applicationAPIDeleteApplicationHandler := connect_go.NewUnaryHandler(
		ApplicationAPIDeleteApplicationProcedure,
		svc.DeleteApplication,
		opts...,
	)
	applicationAPIGetApplicationHandler := connect_go.NewUnaryHandler(
		ApplicationAPIGetApplicationProcedure,
		svc.GetApplication,
		opts...,
	)
	applicationAPIListApplicationsHandler := connect_go.NewUnaryHandler(
		ApplicationAPIListApplicationsProcedure,
		svc.ListApplications,
		opts...,
	)
	applicationAPIUpdateApplicationHandler := connect_go.NewUnaryHandler(
		ApplicationAPIUpdateApplicationProcedure,
		svc.UpdateApplication,
		opts...,
	)
	return "/datalift.application.v1.ApplicationAPI/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ApplicationAPICreateApplicationProcedure:
			applicationAPICreateApplicationHandler.ServeHTTP(w, r)
		case ApplicationAPIDeleteApplicationProcedure:
			applicationAPIDeleteApplicationHandler.ServeHTTP(w, r)
		case ApplicationAPIGetApplicationProcedure:
			applicationAPIGetApplicationHandler.ServeHTTP(w, r)
		case ApplicationAPIListApplicationsProcedure:
			applicationAPIListApplicationsHandler.ServeHTTP(w, r)
		case ApplicationAPIUpdateApplicationProcedure:
			applicationAPIUpdateApplicationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedApplicationAPIHandler returns CodeUnimplemented from all methods.
type UnimplementedApplicationAPIHandler struct{}

func (UnimplementedApplicationAPIHandler) CreateApplication(context.Context, *connect_go.Request[v1.CreateApplicationRequest]) (*connect_go.Response[v1.CreateApplicationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("datalift.application.v1.ApplicationAPI.CreateApplication is not implemented"))
}

func (UnimplementedApplicationAPIHandler) DeleteApplication(context.Context, *connect_go.Request[v1.DeleteApplicationRequest]) (*connect_go.Response[v1.DeleteApplicationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("datalift.application.v1.ApplicationAPI.DeleteApplication is not implemented"))
}

func (UnimplementedApplicationAPIHandler) GetApplication(context.Context, *connect_go.Request[v1.GetApplicationRequest]) (*connect_go.Response[v1.GetApplicationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("datalift.application.v1.ApplicationAPI.GetApplication is not implemented"))
}

func (UnimplementedApplicationAPIHandler) ListApplications(context.Context, *connect_go.Request[v1.ListApplicationsRequest]) (*connect_go.Response[v1.ListApplicationsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("datalift.application.v1.ApplicationAPI.ListApplications is not implemented"))
}

func (UnimplementedApplicationAPIHandler) UpdateApplication(context.Context, *connect_go.Request[v1.UpdateApplicationRequest]) (*connect_go.Response[v1.UpdateApplicationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("datalift.application.v1.ApplicationAPI.UpdateApplication is not implemented"))
}
